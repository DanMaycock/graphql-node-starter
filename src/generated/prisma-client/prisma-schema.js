module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateTestItem {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Mutation {
  createTestItem(data: TestItemCreateInput!): TestItem!
  updateTestItem(data: TestItemUpdateInput!, where: TestItemWhereUniqueInput!): TestItem
  updateManyTestItems(data: TestItemUpdateManyMutationInput!, where: TestItemWhereInput): BatchPayload!
  upsertTestItem(where: TestItemWhereUniqueInput!, create: TestItemCreateInput!, update: TestItemUpdateInput!): TestItem!
  deleteTestItem(where: TestItemWhereUniqueInput!): TestItem
  deleteManyTestItems(where: TestItemWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  testItem(where: TestItemWhereUniqueInput!): TestItem
  testItems(where: TestItemWhereInput, orderBy: TestItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TestItem]!
  testItemsConnection(where: TestItemWhereInput, orderBy: TestItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TestItemConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  testItem(where: TestItemSubscriptionWhereInput): TestItemSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type TestItem {
  id: ID!
  createdAt: DateTime!
  field1: String!
  field2: String!
  user: User
}

type TestItemConnection {
  pageInfo: PageInfo!
  edges: [TestItemEdge]!
  aggregate: AggregateTestItem!
}

input TestItemCreateInput {
  id: ID
  field1: String!
  field2: String!
  user: UserCreateOneInput
}

type TestItemEdge {
  node: TestItem!
  cursor: String!
}

enum TestItemOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  field1_ASC
  field1_DESC
  field2_ASC
  field2_DESC
}

type TestItemPreviousValues {
  id: ID!
  createdAt: DateTime!
  field1: String!
  field2: String!
}

type TestItemSubscriptionPayload {
  mutation: MutationType!
  node: TestItem
  updatedFields: [String!]
  previousValues: TestItemPreviousValues
}

input TestItemSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TestItemWhereInput
  AND: [TestItemSubscriptionWhereInput!]
  OR: [TestItemSubscriptionWhereInput!]
  NOT: [TestItemSubscriptionWhereInput!]
}

input TestItemUpdateInput {
  field1: String
  field2: String
  user: UserUpdateOneInput
}

input TestItemUpdateManyMutationInput {
  field1: String
  field2: String
}

input TestItemWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  field1: String
  field1_not: String
  field1_in: [String!]
  field1_not_in: [String!]
  field1_lt: String
  field1_lte: String
  field1_gt: String
  field1_gte: String
  field1_contains: String
  field1_not_contains: String
  field1_starts_with: String
  field1_not_starts_with: String
  field1_ends_with: String
  field1_not_ends_with: String
  field2: String
  field2_not: String
  field2_in: [String!]
  field2_not_in: [String!]
  field2_lt: String
  field2_lte: String
  field2_gt: String
  field2_gte: String
  field2_contains: String
  field2_not_contains: String
  field2_starts_with: String
  field2_not_starts_with: String
  field2_ends_with: String
  field2_not_ends_with: String
  user: UserWhereInput
  AND: [TestItemWhereInput!]
  OR: [TestItemWhereInput!]
  NOT: [TestItemWhereInput!]
}

input TestItemWhereUniqueInput {
  id: ID
}

type User {
  id: ID!
  createdAt: DateTime!
  name: String!
  email: String!
  password: String!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  email: String!
  password: String!
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
}

type UserPreviousValues {
  id: ID!
  createdAt: DateTime!
  name: String!
  email: String!
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  name: String
  email: String
  password: String
}

input UserUpdateInput {
  name: String
  email: String
  password: String
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
}

input UserUpdateOneInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`
      }
    